#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package tutorial::Operation;
use constant ADD => 1;
use constant SUBTRACT => 2;
use constant MULTIPLY => 3;
use constant DIVIDE => 4;
package tutorial::Work;
use Class::Accessor;
use base('Class::Accessor');
tutorial::Work->mk_accessors( qw( num1 num2 op comment ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{num1} = 0;
$self->{num2} = undef;
$self->{op} = undef;
$self->{comment} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{num1}) {
      $self->{num1} = $vals->{num1};
    }
    if (defined $vals->{num2}) {
      $self->{num2} = $vals->{num2};
    }
    if (defined $vals->{op}) {
      $self->{op} = $vals->{op};
    }
    if (defined $vals->{comment}) {
      $self->{comment} = $vals->{comment};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Work';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{num1});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{num2});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{op});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{comment});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Work');
  if (defined $self->{num1}) {
    $xfer += $output->writeFieldBegin('num1', TType::I32, 1);
    $xfer += $output->writeI32($self->{num1});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{num2}) {
    $xfer += $output->writeFieldBegin('num2', TType::I32, 2);
    $xfer += $output->writeI32($self->{num2});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{op}) {
    $xfer += $output->writeFieldBegin('op', TType::I32, 3);
    $xfer += $output->writeI32($self->{op});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{comment}) {
    $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
    $xfer += $output->writeString($self->{comment});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package tutorial::InvalidOperation;
use base('Thrift::TException');
use Class::Accessor;
use base('Class::Accessor');
tutorial::InvalidOperation->mk_accessors( qw( what why ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{what} = undef;
$self->{why} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{what}) {
      $self->{what} = $vals->{what};
    }
    if (defined $vals->{why}) {
      $self->{why} = $vals->{why};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'InvalidOperation';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{what});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{why});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('InvalidOperation');
  if (defined $self->{what}) {
    $xfer += $output->writeFieldBegin('what', TType::I32, 1);
    $xfer += $output->writeI32($self->{what});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{why}) {
    $xfer += $output->writeFieldBegin('why', TType::STRING, 2);
    $xfer += $output->writeString($self->{why});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
