#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use tutorial::Types;
use shared::SharedService;

# HELPER FUNCTIONS AND STRUCTURES

package tutorial::Calculator_ping_args;
use Class::Accessor;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'Calculator_ping_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Calculator_ping_args');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package tutorial::Calculator_ping_result;
use Class::Accessor;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'Calculator_ping_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Calculator_ping_result');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package tutorial::Calculator_add_args;
use Class::Accessor;
use base('Class::Accessor');
tutorial::Calculator_add_args->mk_accessors( qw( num1 num2 ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{num1} = undef;
$self->{num2} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{num1}) {
      $self->{num1} = $vals->{num1};
    }
    if (defined $vals->{num2}) {
      $self->{num2} = $vals->{num2};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Calculator_add_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{num1});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{num2});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Calculator_add_args');
  if (defined $self->{num1}) {
    $xfer += $output->writeFieldBegin('num1', TType::I32, 1);
    $xfer += $output->writeI32($self->{num1});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{num2}) {
    $xfer += $output->writeFieldBegin('num2', TType::I32, 2);
    $xfer += $output->writeI32($self->{num2});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package tutorial::Calculator_add_result;
use Class::Accessor;
use base('Class::Accessor');
tutorial::Calculator_add_result->mk_accessors( qw( success ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Calculator_add_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Calculator_add_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I32, 0);
    $xfer += $output->writeI32($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package tutorial::Calculator_calculate_args;
use Class::Accessor;
use base('Class::Accessor');
tutorial::Calculator_calculate_args->mk_accessors( qw( logid w ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{logid} = undef;
$self->{w} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{logid}) {
      $self->{logid} = $vals->{logid};
    }
    if (defined $vals->{w}) {
      $self->{w} = $vals->{w};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Calculator_calculate_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{logid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{w} = new tutorial::Work();
        $xfer += $self->{w}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Calculator_calculate_args');
  if (defined $self->{logid}) {
    $xfer += $output->writeFieldBegin('logid', TType::I32, 1);
    $xfer += $output->writeI32($self->{logid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{w}) {
    $xfer += $output->writeFieldBegin('w', TType::STRUCT, 2);
    $xfer += $self->{w}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package tutorial::Calculator_calculate_result;
use Class::Accessor;
use base('Class::Accessor');
tutorial::Calculator_calculate_result->mk_accessors( qw( success ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{success} = undef;
$self->{ouch} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{ouch}) {
      $self->{ouch} = $vals->{ouch};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Calculator_calculate_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{ouch} = new tutorial::InvalidOperation();
        $xfer += $self->{ouch}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Calculator_calculate_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I32, 0);
    $xfer += $output->writeI32($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ouch}) {
    $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
    $xfer += $self->{ouch}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package tutorial::Calculator_zip_args;
use Class::Accessor;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'Calculator_zip_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Calculator_zip_args');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package tutorial::Calculator_zip_result;
use Class::Accessor;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'Calculator_zip_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Calculator_zip_result');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package tutorial::CalculatorIf;
use base('shared::SharedServiceIf');
sub ping{
  my $self = shift;

  die 'implement interface';
}
sub add{
  my $self = shift;
  my $num1 = shift;
  my $num2 = shift;

  die 'implement interface';
}
sub calculate{
  my $self = shift;
  my $logid = shift;
  my $w = shift;

  die 'implement interface';
}
sub zip{
  my $self = shift;

  die 'implement interface';
}
package tutorial::CalculatorRest;
use base('shared::SharedServiceRest');
sub ping{
  my $self = shift;
  my $request = shift;

  return $self->{impl}->ping();
}

sub add{
  my $self = shift;
  my $request = shift;

  my $num1 = ($request->{'num1'}) ? $request->{'num1'} : undef;
  my $num2 = ($request->{'num2'}) ? $request->{'num2'} : undef;
  return $self->{impl}->add($num1, $num2);
}

sub calculate{
  my $self = shift;
  my $request = shift;

  my $logid = ($request->{'logid'}) ? $request->{'logid'} : undef;
  my $w = ($request->{'w'}) ? $request->{'w'} : undef;
  return $self->{impl}->calculate($logid, $w);
}

sub zip{
  my $self = shift;
  my $request = shift;

  return $self->{impl}->zip();
}

package tutorial::CalculatorClient;
use base('shared::SharedServiceClient');
use base('tutorial::CalculatorIf');
sub new {
  my $classname = shift;
  my $input     = shift;
  my $output    = shift;
  my $self      = {};
    $self = $classname->SUPER::new($input, $output);
  return bless($self,$classname);
}

sub ping{
  my $self = shift;

    $self->send_ping();
  $self->recv_ping();
}

sub send_ping{
  my $self = shift;

  $self->{output}->writeMessageBegin('ping', TMessageType::CALL, $self->{seqid});
  my $args = new tutorial::Calculator_ping_args();
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_ping{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new tutorial::Calculator_ping_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  return;
}
sub add{
  my $self = shift;
  my $num1 = shift;
  my $num2 = shift;

    $self->send_add($num1, $num2);
  return $self->recv_add();
}

sub send_add{
  my $self = shift;
  my $num1 = shift;
  my $num2 = shift;

  $self->{output}->writeMessageBegin('add', TMessageType::CALL, $self->{seqid});
  my $args = new tutorial::Calculator_add_args();
  $args->{num1} = $num1;
  $args->{num2} = $num2;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_add{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new tutorial::Calculator_add_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "add failed: unknown result";
}
sub calculate{
  my $self = shift;
  my $logid = shift;
  my $w = shift;

    $self->send_calculate($logid, $w);
  return $self->recv_calculate();
}

sub send_calculate{
  my $self = shift;
  my $logid = shift;
  my $w = shift;

  $self->{output}->writeMessageBegin('calculate', TMessageType::CALL, $self->{seqid});
  my $args = new tutorial::Calculator_calculate_args();
  $args->{logid} = $logid;
  $args->{w} = $w;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_calculate{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new tutorial::Calculator_calculate_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{ouch}) {
    die $result->{ouch};
  }
  die "calculate failed: unknown result";
}
sub zip{
  my $self = shift;

    $self->send_zip();
}

sub send_zip{
  my $self = shift;

  $self->{output}->writeMessageBegin('zip', TMessageType::CALL, $self->{seqid});
  my $args = new tutorial::Calculator_zip_args();
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}
package tutorial::CalculatorProcessor;
use base('shared::SharedServiceProcessor');
sub process {
    my $self   = shift;
    my $input  = shift;
    my $output = shift;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!method_exists($self, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
  }

sub process_ping{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new tutorial::Calculator_ping_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new tutorial::Calculator_ping_result();
    $self->{handler}->ping();
      $output->writeMessageBegin('ping', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
  }
sub process_add{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new tutorial::Calculator_add_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new tutorial::Calculator_add_result();
    $result->{success} = $self->{handler}->add($args->num1, $args->num2);
      $output->writeMessageBegin('add', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
  }
sub process_calculate{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new tutorial::Calculator_calculate_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new tutorial::Calculator_calculate_result();
    eval {
      $result->{success} = $self->{handler}->calculate($args->logid, $args->w);
    }; if( UNIVERSAL::isa($@,'InvalidOperation') ){ 
      $result->{ouch} = $@;
    }
    $output->writeMessageBegin('calculate', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
}
sub process_zip{
  my $self = shift;
  my ($seqid, $input, $output); 
  my $args = new tutorial::Calculator_zip_args();
  $args->read($input);
  $input->readMessageEnd();
  $self->{handler}->zip();
  return;
}
1;
