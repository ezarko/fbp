#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package Road;
use Class::Accessor;
use base('Class::Accessor');
Road->mk_accessors( qw( Name Distance MaxSpeed CurrentSpeed StartIntersection EndIntersection ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{Name} = undef;
$self->{Distance} = undef;
$self->{MaxSpeed} = undef;
$self->{CurrentSpeed} = undef;
$self->{StartIntersection} = undef;
$self->{EndIntersection} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{Name}) {
      $self->{Name} = $vals->{Name};
    }
    if (defined $vals->{Distance}) {
      $self->{Distance} = $vals->{Distance};
    }
    if (defined $vals->{MaxSpeed}) {
      $self->{MaxSpeed} = $vals->{MaxSpeed};
    }
    if (defined $vals->{CurrentSpeed}) {
      $self->{CurrentSpeed} = $vals->{CurrentSpeed};
    }
    if (defined $vals->{StartIntersection}) {
      $self->{StartIntersection} = $vals->{StartIntersection};
    }
    if (defined $vals->{EndIntersection}) {
      $self->{EndIntersection} = $vals->{EndIntersection};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Road';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{Name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{Distance});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{MaxSpeed});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{CurrentSpeed});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{StartIntersection});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{EndIntersection});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Road');
  if (defined $self->{Name}) {
    $xfer += $output->writeFieldBegin('Name', TType::STRING, 1);
    $xfer += $output->writeString($self->{Name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{Distance}) {
    $xfer += $output->writeFieldBegin('Distance', TType::DOUBLE, 2);
    $xfer += $output->writeDouble($self->{Distance});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{MaxSpeed}) {
    $xfer += $output->writeFieldBegin('MaxSpeed', TType::I32, 3);
    $xfer += $output->writeI32($self->{MaxSpeed});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{CurrentSpeed}) {
    $xfer += $output->writeFieldBegin('CurrentSpeed', TType::I32, 4);
    $xfer += $output->writeI32($self->{CurrentSpeed});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{StartIntersection}) {
    $xfer += $output->writeFieldBegin('StartIntersection', TType::STRING, 5);
    $xfer += $output->writeString($self->{StartIntersection});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{EndIntersection}) {
    $xfer += $output->writeFieldBegin('EndIntersection', TType::STRING, 6);
    $xfer += $output->writeString($self->{EndIntersection});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Intersection;
use Class::Accessor;
use base('Class::Accessor');
Intersection->mk_accessors( qw( Name ConnectedRoads ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{Name} = undef;
$self->{ConnectedRoads} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{Name}) {
      $self->{Name} = $vals->{Name};
    }
    if (defined $vals->{ConnectedRoads}) {
      $self->{ConnectedRoads} = $vals->{ConnectedRoads};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Intersection';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{Name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size0 = 0;
          $self->{ConnectedRoads} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $elem5 = new Road();
            $xfer += $elem5->read($input);
            push(@{$self->{ConnectedRoads}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Intersection');
  if (defined $self->{Name}) {
    $xfer += $output->writeFieldBegin('Name', TType::STRING, 1);
    $xfer += $output->writeString($self->{Name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ConnectedRoads}) {
    $xfer += $output->writeFieldBegin('ConnectedRoads', TType::LIST, 2);
    {
      $output->writeListBegin(TType::STRUCT, scalar(@{$self->{ConnectedRoads}}));
      {
        foreach my $iter6 (@{$self->{ConnectedRoads}}) 
        {
          $xfer += ${iter6}->write($output);
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package IntersectionsForRoad;
use Class::Accessor;
use base('Class::Accessor');
IntersectionsForRoad->mk_accessors( qw( StartIntersection EndIntersection ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{StartIntersection} = undef;
$self->{EndIntersection} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{StartIntersection}) {
      $self->{StartIntersection} = $vals->{StartIntersection};
    }
    if (defined $vals->{EndIntersection}) {
      $self->{EndIntersection} = $vals->{EndIntersection};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'IntersectionsForRoad';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{StartIntersection} = new Intersection();
        $xfer += $self->{StartIntersection}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{EndIntersection} = new Intersection();
        $xfer += $self->{EndIntersection}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('IntersectionsForRoad');
  if (defined $self->{StartIntersection}) {
    $xfer += $output->writeFieldBegin('StartIntersection', TType::STRUCT, 1);
    $xfer += $self->{StartIntersection}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{EndIntersection}) {
    $xfer += $output->writeFieldBegin('EndIntersection', TType::STRUCT, 2);
    $xfer += $self->{EndIntersection}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package IntersectionsFromRoad;
use Class::Accessor;
use base('Class::Accessor');
IntersectionsFromRoad->mk_accessors( qw( Connections ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{Connections} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{Connections}) {
      $self->{Connections} = $vals->{Connections};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'IntersectionsFromRoad';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size7 = 0;
          $self->{Connections} = {};
          my $_ktype8 = 0;
          my $_vtype9 = 0;
          $xfer += $input->readMapBegin(\$_ktype8, \$_vtype9, \$_size7);
          for (my $_i11 = 0; $_i11 < $_size7; ++$_i11)
          {
            my $key12 = '';
            my $val13 = new IntersectionsForRoad();
            $xfer += $input->readString(\$key12);
            $val13 = new IntersectionsForRoad();
            $xfer += $val13->read($input);
            $self->{Connections}->{$key12} = $val13;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('IntersectionsFromRoad');
  if (defined $self->{Connections}) {
    $xfer += $output->writeFieldBegin('Connections', TType::MAP, 1);
    {
      $output->writeMapBegin(TType::STRING, TType::STRUCT, scalar(keys %{$self->{Connections}}));
      {
        while( my ($kiter14,$viter15) = each %{$self->{Connections}}) 
        {
          $xfer += $output->writeString($kiter14);
          $xfer += ${viter15}->write($output);
        }
      }
      $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package RoadMap;
use Class::Accessor;
use base('Class::Accessor');
RoadMap->mk_accessors( qw( Intersections ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{Intersections} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{Intersections}) {
      $self->{Intersections} = $vals->{Intersections};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'RoadMap';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size16 = 0;
          $self->{Intersections} = [];
          my $_etype19 = 0;
          $xfer += $input->readListBegin(\$_etype19, \$_size16);
          for (my $_i20 = 0; $_i20 < $_size16; ++$_i20)
          {
            my $elem21 = undef;
            $elem21 = new Intersection();
            $xfer += $elem21->read($input);
            push(@{$self->{Intersections}},$elem21);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RoadMap');
  if (defined $self->{Intersections}) {
    $xfer += $output->writeFieldBegin('Intersections', TType::LIST, 1);
    {
      $output->writeListBegin(TType::STRUCT, scalar(@{$self->{Intersections}}));
      {
        foreach my $iter22 (@{$self->{Intersections}}) 
        {
          $xfer += ${iter22}->write($output);
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package NoMoveMadeException;
use base('Thrift::TException');
use Class::Accessor;
use base('Class::Accessor');
NoMoveMadeException->mk_accessors( qw( message ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'NoMoveMadeException';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('NoMoveMadeException');
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package GameOverException;
use base('Thrift::TException');
use Class::Accessor;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'GameOverException';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('GameOverException');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package UnregisteredException;
use base('Thrift::TException');
use Class::Accessor;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'UnregisteredException';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('UnregisteredException');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DuplicateEmailException;
use base('Thrift::TException');
use Class::Accessor;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'DuplicateEmailException';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DuplicateEmailException');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
